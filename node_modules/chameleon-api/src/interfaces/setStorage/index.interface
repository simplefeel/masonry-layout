<script cml-type="interface">
type obj = {
  errno: Number,
  errMsg: String,
  data: String
}
type setCallback = (value: obj) => void

interface UtilsInterface {
  setStorage(key: String, value: String, cb: setCallback): void;
}

</script>

<script cml-type="web">
  class Method implements UtilsInterface {
    setStorage(key, value, cb) {
      try {
        let data = localStorage.setItem(key, value);
        cb({
          errno: 0,
          errMsg: 'success',
          data: value
        });
      } catch (e) {
        let errMsg;
        if (typeof e !== 'string') {
          errMsg = JSON.stringify(e);
        } else {
          errMsg = e;
        }
        cb({
          errno: -1,
          errMsg,
          data: ''
        });
      }
    }
  }
  export default new Method();
</script>

<script cml-type="weex">
import cmlBridge from '../../lib/sdk/cmlBridge';
import { inSDK } from '../../lib/sdk/env';

class Method implements UtilsInterface {
  setStorage(key, value, cb) {
    if(inSDK()) {
      cmlBridge.setStorage({key, value}, res =>{
        const { errno, msg = '' } = res;
        cb({
          errno: +errno || 0,
          errMsg: msg,
          data: ''
        });
      });
    }else {
      const storage = weex.requireModule('storage');
      storage.setItem(key, value, function (e) {
        if (e.result === 'success') {
          cb({
            errno: 0,
            errMsg: '',
            data: value
          });
        } else {
          cb({
            errno: -1,
            errMsg: 'weex storage.setItem fail',
            data: ''
          });
        }
      });
    }
  }
}
export default new Method();
</script>

<script cml-type="wx">
  class Method implements UtilsInterface {
    setStorage(key, value, cb) {
      try {
        wx.setStorage({
          key,
          data: value,
          success: function() {
            cb({
              errno: 0,
              errMsg: 'success',
              data: value
            });
          },
          fail: function() {
            cb({
              errno: -1,
              errMsg: 'fail',
              data: ''
            });
          }
        });
      } catch (e) {
        let errMsg;
        if (typeof e !== 'string') {
          errMsg = JSON.stringify(e);
        } else {
          errMsg = e;
        }
        cb({
          errno: -1,
          errMsg,
          data: ''
        });
      }
    }
  }
  export default new Method();
</script>

<script cml-type="baidu">
  class Method implements UtilsInterface {
    setStorage(key, value, cb) {
      try {
        swan.setStorage({
          key,
          data: value,
          success: function() {
            cb({
              errno: 0,
              errMsg: 'success',
              data: value
            });
          },
          fail: function() {
            cb({
              errno: -1,
              errMsg: 'fail',
              data: ''
            });
          }
        });
      } catch (e) {
        let errMsg;
        if (typeof e !== 'string') {
          errMsg = JSON.stringify(e);
        } else {
          errMsg = e;
        }
        cb({
          errno: -1,
          errMsg,
          data: ''
        });
      }
    }
  }
  export default new Method();
</script>

<script cml-type="alipay">
  class Method implements UtilsInterface {
    setStorage(key, value, cb) {
      try {
        my.setStorage({
          key,
          data: value,
          success: function() {
            cb({
              errno: 0,
              errMsg: 'success',
              data: value
            });
          },
          fail: function() {
            cb({
              errno: -1,
              errMsg: 'fail',
              data: ''
            });
          }
        });
      } catch (e) {
        let errMsg;
        if (typeof e !== 'string') {
          errMsg = JSON.stringify(e);
        } else {
          errMsg = e;
        }
        cb({
          errno: -1,
          errMsg,
          data: ''
        });
      }
    }
  }
  export default new Method();
</script>
