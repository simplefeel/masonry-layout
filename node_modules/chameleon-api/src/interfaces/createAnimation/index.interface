<script cml-type="interface">
  interface CreateAnimationInterface {
    initAnimation(): void;
    exportMiddleWare(param: CMLObject): CMLObject;
    checkNumber(param: Number): void;
    checkString(param: String): void;
    checkObject(param: CMLObject): void;
    getViewportWidth(): number;
  }

</script>

<script cml-type="web">
  import Velocity from './velocity-min.js';
  import {
    commonLoader as s_commonLoader,
    cacheTransformStylesLoader as s_cacheTransformStylesLoader,
  } from './styleLoader/common';
  import {
    transformLoader as s_transformLoader,
    originLoader as s_originLoader,
    completionLoader as s_completionLoader,
  } from './styleLoader/web';
  import {
    commonLoader as d_commonLoader,
    cacheTransformOriginLoader as d_cacheTransformOriginLoader,
  } from './descriptionLoader/common';
  import {
    stylePipe,
    descriptionPipe,
  } from './_util';

  const styleLoaderQueue = [s_commonLoader, s_cacheTransformStylesLoader, s_transformLoader, s_originLoader];
  const descriptionLoaderQueue = [d_commonLoader, d_cacheTransformOriginLoader]

  // web端接口实现
  const beginAnimation = (elm, animationInfo) => {
    if (animationInfo && animationInfo.useExport === '1') {
      const { updateQueue } = animationInfo;
      const len = updateQueue.length;
      let current = Promise.resolve();
      for (let i = 0; i < len; i++) {
        const info = updateQueue[i];
        current = current.then(() => {
          return Velocity(elm, stylePipe(info.styles, info.descriptions, [s_completionLoader], elm), info.descriptions).then(() => { info.descriptions.cb(); });
        });
      }
    }
  };

  class Method implements CreateAnimationInterface {
    initAnimation() {
      Vue.directive('animation', {
        bind: function (elm, binding) {
          beginAnimation(elm, binding.value);
        },
        update: function (elm, binding) {
          beginAnimation(elm, binding.value);
        },
      });
    }

    checkNumber(number) {}
    checkString(string) {}
    checkObject(object) {}

    getViewportWidth() {
      let viewportWidth;
      if (window.innerWidth) {
        viewportWidth = window.innerWidth;
      } else if (document.documentElement && document.documentElement.clientWidth || document.body && document.body.clientWidth) {
        viewportWidth = document.documentElement && document.documentElement.clientWidth || document.body && document.body.clientWidth;
      }

      return viewportWidth;
    }

    exportMiddleWare(param) {
      return {
        useExport: param.useExport,
        updateQueue: param.updateQueue.map(function(tick) {
          return {
            styles: stylePipe(tick.styles, tick.descriptions, styleLoaderQueue, param.id),
            descriptions: descriptionPipe(tick.descriptions, tick.styles, descriptionLoaderQueue, param.id)
          };
        })
      };
    }
  }

  export default new Method();
</script>

<script cml-type="weex">
  import {
    commonLoader as s_commonLoader,
    cacheTransformStylesLoader as s_cacheTransformStylesLoader,
  } from './styleLoader/common';
  import {
    transformLoader as s_transformLoader,
    originLoader as s_originLoader,
  } from './styleLoader/weex';
  import {
    commonLoader as d_commonLoader,
    cacheTransformOriginLoader as d_cacheTransformOriginLoader,
  } from './descriptionLoader/common';
  import {
    stylePipe,
    descriptionPipe,
  } from './_util';

  const styleLoaderQueue = [s_commonLoader, s_cacheTransformStylesLoader, s_transformLoader, s_originLoader];
  const descriptionLoaderQueue = [d_commonLoader, d_cacheTransformOriginLoader]
  const transformMap = {};
  const transformOriginMap = {};

  const animation = weex.requireModule('animation');

  const beginAnimation = (elm, animationInfo) => {
    if (animationInfo && animationInfo.useExport === '1') {
      const { updateQueue } = animationInfo;
      const len = updateQueue.length;
      let current = Promise.resolve();
      for (let i = 0; i < len; i++) {
        const info = updateQueue[i];

        current = current.then(() => {
          return new Promise((res, rej) => {
            animation.transition(
              elm,
              Object.assign(info.descriptions, { styles: info.styles }),
              () => {
                info.descriptions.cb();
                res();
              }
            );
          });
        });
      }
    }
  };

  class Method implements CreateAnimationInterface {
    initAnimation() {
      Vue.directive('animation', {
        bind: function (elm, binding) {
          beginAnimation(elm, binding.value);
        },
        update: function (elm, binding) {
          beginAnimation(elm, binding.value);
        },
      });
    }

    checkNumber(number) {}
    checkString(string) {}
    checkObject(object) {}
    getViewportWidth() { return 0 }

    exportMiddleWare(param) {
      return {
        useExport: param.useExport,
        updateQueue: param.updateQueue.map(function(tick) {
          return {
            styles: stylePipe(tick.styles, tick.descriptions, styleLoaderQueue, param.id),
            descriptions: descriptionPipe(tick.descriptions, tick.styles, descriptionLoaderQueue, param.id)
          } ;
        })
      };
    }
  }

  export default new Method();
</script>

<script cml-type="wx">
  import {
    commonLoader as s_commonLoader,
    cacheTransformStylesLoader as s_cacheTransformStylesLoader,
  } from './styleLoader/common';
  import {
    transformLoader as s_transformLoader,
  } from './styleLoader/wx';
  import {
    commonLoader as d_commonLoader,
    cacheTransformOriginLoader as d_cacheTransformOriginLoader,
  } from './descriptionLoader/common';
  import {
    stylePipe,
    descriptionPipe,
  } from './_util';

  const styleLoaderQueue = [s_commonLoader, s_cacheTransformStylesLoader, s_transformLoader];
  const descriptionLoaderQueue = [d_commonLoader, d_cacheTransformOriginLoader];

  const createAnimationFuc = (quene) => {
    const animation = wx.createAnimation();
    const cbs = {};
    quene.forEach((tick, i) => {
      const { styles, descriptions } = tick;
      cbs[i] = descriptions.cb
      Object.keys(styles).forEach((key) => {
        const value = styles[key];

        animation[key](value);
      });

      animation.step(descriptions);
    });

    const temp = animation.export();
    temp.cbs = cbs;
    temp.index = 0;

    return temp;
  };

  class Method implements CreateAnimationInterface {
    initAnimation() {}
    checkNumber(number) {}
    checkString(string) {}
    checkObject(object) {}

    getViewportWidth() {
      const { windowWidth } = wx.getSystemInfoSync();
      return windowWidth;
    }

    exportMiddleWare(param) {
      return createAnimationFuc(param.updateQueue.map(function(tick) {
        return {
          styles: stylePipe(tick.styles, tick.descriptions, styleLoaderQueue, param.id),
          descriptions: descriptionPipe(tick.descriptions, tick.styles, descriptionLoaderQueue, param.id)
        };
      }));
    }
  }

  export default new Method();
</script>

<script cml-type="baidu">
  import {
    commonLoader as s_commonLoader,
    cacheTransformStylesLoader as s_cacheTransformStylesLoader,
  } from './styleLoader/common';
  import {
    transformLoader as s_transformLoader,
  } from './styleLoader/baidu';
  import {
    commonLoader as d_commonLoader,
    cacheTransformOriginLoader as d_cacheTransformOriginLoader,
  } from './descriptionLoader/common';
  import {
    stylePipe,
    descriptionPipe,
  } from './_util';
  const styleLoaderQueue = [s_commonLoader, s_cacheTransformStylesLoader, s_transformLoader];
  const descriptionLoaderQueue = [d_commonLoader, d_cacheTransformOriginLoader];

  const createAnimationFuc = (quene) => {
    const animation = swan.createAnimation();
    const cbs = {};
    quene.forEach((tick, i) => {
      const { styles, descriptions } = tick;
      cbs[i] = descriptions.cb
      Object.keys(styles).forEach((key) => {
        const value = styles[key];

        animation[key](value);
      });

      animation.step(descriptions);
    });

    const temp = animation.export();
    temp.cbs = cbs;
    temp.index = 0;

    return temp;
  };

  class Method implements CreateAnimationInterface {
    initAnimation() {}
    checkNumber(number) {}
    checkString(string) {}
    checkObject(object) {}
    getViewportWidth() {
      const { windowWidth } = swan.getSystemInfoSync();
      return windowWidth;
    }
    exportMiddleWare(param) {
      return createAnimationFuc(param.updateQueue.map(function(tick) {
        return {
          styles: stylePipe(tick.styles, tick.descriptions, styleLoaderQueue, param.id),
          descriptions: descriptionPipe(tick.descriptions, tick.styles, descriptionLoaderQueue, param.id)
        };
      }));
    }
  }

  export default new Method();
</script>

<script cml-type="alipay">
import {
  commonLoader as s_commonLoader,
  cacheTransformStylesLoader as s_cacheTransformStylesLoader,
} from './styleLoader/common';
import {
  transformLoader as s_transformLoader,
} from './styleLoader/alipay';
import {
  commonLoader as d_commonLoader,
  cacheTransformOriginLoader as d_cacheTransformOriginLoader,
} from './descriptionLoader/common';
import {
  stylePipe,
  descriptionPipe,
} from './_util';

const styleLoaderQueue = [s_commonLoader, s_cacheTransformStylesLoader, s_transformLoader];
const descriptionLoaderQueue = [d_commonLoader, d_cacheTransformOriginLoader];

const createAnimationFuc = (quene) => {
  const animation = my.createAnimation();
  const cbs = {};
  quene.forEach((tick, i) => {
    const { styles, descriptions } = tick;
    cbs[i] = descriptions.cb
    Object.keys(styles).forEach((key) => {
      const value = styles[key];

      animation[key](value);
    });

    animation.step(descriptions);
  });

  const temp = {};
  temp.cbs = cbs;
  temp.index = 0;
  temp.actions = animation.export();

  return temp;
};

class Method implements CreateAnimationInterface {
  initAnimation() {}
  checkNumber(number) {}
  checkString(string) {}
  checkObject(object) {}

  getViewportWidth() {
    const { windowWidth } = my.getSystemInfoSync();
    return windowWidth;
  }

  exportMiddleWare(param) {
    return createAnimationFuc(param.updateQueue.map(function(tick) {
      return {
        styles: stylePipe(tick.styles, tick.descriptions, styleLoaderQueue, param.id),
        descriptions: descriptionPipe(tick.descriptions, tick.styles, descriptionLoaderQueue, param.id)
      };
    }));
  }
}

export default new Method();
</script>
